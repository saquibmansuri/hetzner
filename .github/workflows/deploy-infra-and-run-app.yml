name: Create Infrastructure on Hetzner and Deploy Application

env:
  HCLOUD_TOKEN_PASS: ${{ secrets.HCLOUD_TOKEN }}

on:
  workflow_dispatch:
    inputs:
      client_name:
        description: "Name of the new client"
        required: true
      subdomain_name:
        description: "Subdomain name for the new DNS record"
        required: true
      server_type:
        description: "Type of server (e.g. cx11, cpx11, cax11, ccx13)"
        required: true
        default: "cx31"
      desired_server_location:
        description: "Desired location of server (e.g. nbg1, fsn1, hel1, ash, hil)"
        required: true
        default: "nbg1"
      os_image:
        description: "Operating system (e.g. ubuntu-20.04, debian, centos)"
        required: true
        default: "ubuntu-22.04"
      network:
        description: "Existing network name"
        required: true
        default: "test-network"
      load_balancer_type:
        description: "Load balancer type (e.g. lb11, lb21, lb31)"
        required: true
        default: "lb11"
      certificate_id:
        description: "Id of existing ssl certificate"
        required: true
        default: "123456"

jobs:
  create-infra:
    runs-on: ubuntu-latest
    outputs:
      SERVER_IP: ${{ steps.fetch-ip.outputs.SERVER_IP }}
      LB_IP: ${{ steps.fetch-lb-ip.outputs.LB_IP }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install hcloud cli
        run: |
          sudo apt-get update -y
          curl -sL https://github.com/hetznercloud/cli/releases/latest/download/hcloud-linux-amd64.tar.gz | tar xz
          sudo install -m 0755 hcloud /usr/local/bin/hcloud
          hcloud version

      - name: Create new firewall and define rules
        run: |
          export HCLOUD_TOKEN="$HCLOUD_TOKEN_PASS"
          # Command for creating a firewall
          hcloud firewall create --name ${{ github.event.inputs.client_name }}-firewall

          # Commands for adding rules
          hcloud firewall add-rule ${{ github.event.inputs.client_name }}-firewall --direction in --source-ips 0.0.0.0/0 --source-ips ::/0 --protocol tcp --port 80 --description "Allow HTTP"
          hcloud firewall add-rule ${{ github.event.inputs.client_name }}-firewall --direction in --source-ips 0.0.0.0/0 --source-ips ::/0 --protocol tcp --port 443 --description "Allow HTTPS"
          hcloud firewall add-rule ${{ github.event.inputs.client_name }}-firewall --direction in --source-ips 0.0.0.0/0 --source-ips ::/0 --protocol tcp --port 22 --description "Allow SSH"
          hcloud firewall add-rule ${{ github.event.inputs.client_name }}-firewall --direction in --source-ips 0.0.0.0/0 --source-ips ::/0 --protocol icmp --description "Allow ICMP"

      - name: List all existing certificate details
        run: |
          export HCLOUD_TOKEN="$HCLOUD_TOKEN_PASS"
          hcloud certificate list -o columns=name,id,type,domain_names

      - name: Create server on hetzner cloud
        run: |
          export HCLOUD_TOKEN="$HCLOUD_TOKEN_PASS"
          echo "Creating Server on Hetzner Cloud"
          hcloud server create --name ${{ github.event.inputs.client_name }}-vm \
                                --location ${{ github.event.inputs.desired_server_location }} \
                                --type ${{ github.event.inputs.server_type }} \
                                --image ${{ github.event.inputs.os_image }} \
                                --network ${{ github.event.inputs.network }} \
                                --firewall ${{ github.event.inputs.client_name }}-firewall \
                                --ssh-key testkey1 \
                                --ssh-key testkey2

      - name: Create load balancer and attach to network
        run: |
          export HCLOUD_TOKEN="$HCLOUD_TOKEN_PASS"
          hcloud load-balancer create --name ${{ github.event.inputs.client_name }}-lb --type ${{ github.event.inputs.load_balancer_type }} --location ${{ github.event.inputs.desired_server_location }}
          hcloud load-balancer attach-to-network --network ${{ github.event.inputs.network }} ${{ github.event.inputs.client_name }}-lb

      - name: Setup load balancer service rules and targets
        run: |
          export HCLOUD_TOKEN="$HCLOUD_TOKEN_PASS"
          # Replace <cert-id> with the actual ID of the certificate, defaults to existing '123456'
          hcloud load-balancer add-service --protocol https \
                                            --listen-port 443 \
                                            --destination-port 80 \
                                            --http-certificates ${{ github.event.inputs.certificate_id }} \
                                            ${{ github.event.inputs.client_name }}-lb
          hcloud load-balancer add-target --server ${{ github.event.inputs.client_name }}-vm  --use-private-ip ${{ github.event.inputs.client_name }}-lb

      - name: Update health check status codes in load balancer
        run: |
          export HCLOUD_TOKEN="$HCLOUD_TOKEN_PASS"
          # Add status codes 200-299,300-399,400-499
          hcloud load-balancer update-service --listen-port 443 \
                                               --health-check-http-status-codes "2??,3??,4??" \
                                               ${{ github.event.inputs.client_name }}-lb

      - name: Fetch server IP
        id: fetch-ip
        run: |
          export HCLOUD_TOKEN="$HCLOUD_TOKEN_PASS"
          SERVER_IP=$(hcloud server describe ${{ github.event.inputs.client_name }}-vm | grep IP: | awk 'NR==1{print $2}')
          echo "Server IP fetched: $SERVER_IP"
          echo "SERVER_IP=$SERVER_IP" >> $GITHUB_OUTPUT

      - name: Fetch load balancer IP
        id: fetch-lb-ip
        run: |
          export HCLOUD_TOKEN="$HCLOUD_TOKEN_PASS"
          LB_IP=$(hcloud load-balancer describe ${{ github.event.inputs.client_name }}-lb | grep IP: | awk 'NR==1{print $2}')
          echo "Load Balancer IP fetched: $LB_IP"
          echo "LB_IP=$LB_IP" >> $GITHUB_OUTPUT

      - name: Create DNS record
        run: |
          curl -X "POST" "https://dns.hetzner.com/api/v1/records" \
            -H 'Content-Type: application/json' \
            -H 'Auth-API-Token: ${{ secrets.HETZNER_DNS_API_TOKEN }}' \
            -d $'{
              "value": "${{ steps.fetch-lb-ip.outputs.LB_IP }}",
              "ttl": 86400,
              "type": "A",
              "name": "${{ github.event.inputs.subdomain_name }}",
              "zone_id": "${{ secrets.HETZNER_DNS_ZONE_ID }}"
            }'

  deploy-app:
    needs: [create-infra]
    runs-on: ubuntu-latest
    env:
      SERVER_IP: ${{ needs.create-infra.outputs.SERVER_IP }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install docker and docker compose
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.SERVER_IP }}
          username: root
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /root
            curl -fsSL https://get.docker.com -o get-docker.sh
            sudo sh get-docker.sh
            sudo apt-get install docker-compose-plugin

      - name: Setup directories and env files
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.SERVER_IP }}
          username: root
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            mkdir -p /root/src
            touch /root/src/.env
            echo "${{ secrets.ENV_FILE_CONTENT }}" > /root/src/.env

      - name: Transfer code to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ env.SERVER_IP }}
          username: root
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "."
          target: "/root/src"

      - name: Docker compose up on server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.SERVER_IP }}
          username: root
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /root/src
            docker compose up -d
